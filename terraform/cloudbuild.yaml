# Build configuration overview: https://cloud.google.com/cloud-build/docs/build-config
# Cloud builders: https://cloud.google.com/cloud-build/docs/cloud-builders

steps:
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Configure permissions'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        chown -R 1000 /workspace/terraform/
    waitFor: ['-']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Pull image'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        set -e

        TAG=$({ (md5sum docker-compose.yml) ; (md5sum terraform/Dockerfile) } | md5sum | awk '{print $$1}')

        echo -e "$$TAG\c" > /var/share/tag

        if docker pull gcr.io/$PROJECT_ID/terraform:$$TAG; then
          echo "Successfully pulled image"
          touch /var/share/pull
        fi
    waitFor: ['-']

  - name: 'gcr.io/kaniko-project/executor:debug'
    id: 'Build Terraform image'
    entrypoint: /busybox/sh
    args:
      - -c
      - |
        if [ -f /var/share/pull ]; then
          echo "Image already exists, skipping build"
        else
          executor \
            --build-arg="alpine_version=$$(eval $$ALPINE_VERSION)" \
            --build-arg="google_cloud_sdk_version=$$(eval $$GOOGLE_CLOUD_SDK_VERSION)" \
            --build-arg="terraform_version=$$(eval $$TERRAFORM_VERSION)" \
            --build-arg="uid=1000" \
            --destination=gcr.io/$PROJECT_ID/terraform:$(cat /var/share/tag) \
            --context=/workspace/terraform/ \
            --cache=true
        fi
    waitFor: ['Pull image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Tag image'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        set -e

        if [ -f /var/share/pull ]; then
          docker pull gcr.io/$PROJECT_ID/terraform:$(cat /var/share/tag)
        fi

        docker tag gcr.io/$PROJECT_ID/terraform:$(cat /var/share/tag) gcr.io/$PROJECT_ID/terraform:latest
    waitFor: ['Build Terraform image']

  - name: 'gcr.io/$PROJECT_ID/terraform'
    id: 'Initialize org configuration'
    dir: /workspace/terraform/org
    args: ['init', '-backend=false']
    waitFor: ['Configure permissions', 'Tag image']

  - name: 'gcr.io/$PROJECT_ID/terraform'
    id: 'Validate org configuration'
    dir: /workspace/terraform/org
    args: ['validate']
    waitFor: ['Initialize org configuration']

  - name: 'gcr.io/$PROJECT_ID/terraform'
    id: 'Format org configuration'
    dir: /workspace/terraform/org
    args: ['fmt', '-recursive', '-diff', '-check']
    waitFor: ['Validate org configuration']

  - name: 'gcr.io/$PROJECT_ID/terraform'
    id: 'Initialize web configuration'
    dir: /workspace/terraform/web
    args: ['init', '-backend=false']
    waitFor: ['Configure permissions', 'Tag image']

  - name: 'gcr.io/$PROJECT_ID/terraform'
    id: 'Validate web configuration'
    dir: /workspace/terraform/web
    args: ['validate']
    waitFor: ['Initialize web configuration']

  - name: 'gcr.io/$PROJECT_ID/terraform'
    id: 'Format web configuration'
    dir: /workspace/terraform/web
    args: ['fmt', '-recursive', '-diff', '-check']
    waitFor: ['Validate web configuration']

options:
  env:
    - ALPINE_VERSION=cat docker-compose.yml | grep alpine_version | cut -d ':' -f 2 | xargs
    - GOOGLE_CLOUD_SDK_VERSION=cat docker-compose.yml | grep google_cloud_sdk_version | cut -d ':' -f 2 | xargs
    - TERRAFORM_VERSION=cat docker-compose.yml | grep terraform_version | cut -d ':' -f 2 | xargs
  volumes:
    - name: share
      path: /var/share
