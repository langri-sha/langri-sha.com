// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`add subproject 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "someproject/@some/test/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/tsconfig.json
!/.projenrc.mts
",
  "someproject/@some/test/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "tsconfig.json",
    ],
  },
  "someproject/@some/test/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "someproject/@some/test/tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "compilerOptions": {
      "baseUrl": ".",
      "outDir": ".tsbuild",
    },
    "extends": "@langri-sha/tsconfig/project.json",
  },
}
`;

exports[`defaults 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
}
`;

exports[`with \`lint-staged\` 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/lint-staged.config.mjs
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "lint-staged.config.mjs",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "lint-staged.config.mjs": "import defaults from '@langri-sha/lint-staged'

/** @type {import('lint-staged').Config} */
    const config = {
      ...defaults,
      }

    export default config
    ",
}
`;

exports[`with Beachball configuration 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/tsconfig.json
!/prettier.config.mjs
!/.prettierignore
!/beachball.config.js
!/.projenrc.mts
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.projenrc.mts
pnpm-lock.yaml
CHANGELOG.md
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "@langri-sha/tsconfig",
        "type": "build",
        "version": "*",
      },
      {
        "name": "beachball",
        "type": "build",
        "version": "2.43.1",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.81.15",
      },
      {
        "name": "ts-node",
        "type": "build",
        "version": "10.9.2",
      },
      {
        "name": "typescript",
        "type": "build",
        "version": "5.4.5",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".prettierignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "beachball.config.js",
      "prettier.config.mjs",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "beachball.config.js": "/** @type {import('beachball').BeachballConfig} */
module.exports = {
  "branch": "origin/main",
  "gitTags": false,
  "ignorePatterns": [
    "*.test.*",
    ".*/**",
    "__snapshots__/",
    "dist/",
    "node_modules/"
  ]
}",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "@langri-sha/tsconfig": "*",
      "beachball": "2.43.1",
      "projen": "0.81.15",
      "ts-node": "10.9.2",
      "typescript": "5.4.5",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "scripts": {
      "default": "npx projen default",
    },
    "version": "0.0.0",
  },
  "prettier.config.mjs": "import defaults from '@langri-sha/prettier'

/** @type {import("prettier").Config} */
    const config = {
      ...defaults,
      }

    export default config
    ",
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      "beachball.config.js",
    ],
  },
}
`;

exports[`with ESLint options 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/eslint.config.mjs
!/.projenrc.mts
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.81.15",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "eslint.config.mjs",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "eslint.config.mjs": "import defaults from '@langri-sha/eslint-config'

export default [...defaults, {"ignores":[".*",".projenrc.mts"]}]",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "projen": "0.81.15",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "scripts": {
      "default": "npx projen default",
    },
    "version": "0.0.0",
  },
}
`;

exports[`with EditorConfig options 1`] = `
{
  ".editorconfig": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

root=true

[*]
charset=utf-8
end_of_line=lf
indent_style=space
indent_size=2
insert_final_newline=true
trim_trailing_whitespace=true

[Dockerfile]
indent_style=tab
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/prettier.config.mjs
!/.prettierignore
!/.editorconfig
!/.projenrc.mts
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.projenrc.mts
!.editorconfig
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".editorconfig",
      ".gitattributes",
      ".gitignore",
      ".prettierignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "prettier.config.mjs",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "prettier.config.mjs": "import defaults from '@langri-sha/prettier'

/** @type {import("prettier").Config} */
    const config = {
      ...defaults,
      }

    export default config
    ",
}
`;

exports[`with Husky options 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.husky/
!.projen/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/.projenrc.mts
",
  ".husky/pre-commit": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
lint-staged
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "husky",
        "type": "build",
        "version": "9.0.11",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.81.15",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".husky/pre-commit",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "husky": "9.0.11",
      "projen": "0.81.15",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "scripts": {
      "default": "npx projen default",
      "prepare": "husky",
    },
    "version": "0.0.0",
  },
}
`;

exports[`with Jest configuration defaults 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/jest.config.ts
!/.npmignore
!/.projenrc.mts
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
*.test.*
__snapshots__/
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "jest.config.ts",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "jest.config.ts": "import type { Config } from 'jest'

    const config: Config = {
      
      }

    export default config
    ",
}
`;

exports[`with NPM ignore defaults 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
"
`;

exports[`with Prettier options 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/prettier.config.mjs
!/.prettierignore
!/.projenrc.mts
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".prettierignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "prettier.config.mjs",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "prettier.config.mjs": "import defaults from '@langri-sha/prettier'

/** @type {import("prettier").Config} */
    const config = {
      ...defaults,
      }

    export default config
    ",
}
`;

exports[`with Renovate options 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/renovate.json5
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "renovate.json5",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "renovate": {
        "description": "Run Renovate locally for debugging",
        "name": "renovate",
        "steps": [
          {
            "exec": "pnpx renovate --platform=local --repository-cache=reset --dry-run=full",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "renovate.json5": {
    "$schema": "https://docs.renovatebot.com/renovate-schema.json",
    "configMigration": true,
    "customManagers": [
      {
        "currentValueTemplate": ">= {{currentValue}}",
        "customType": "regex",
        "datasourceTemplate": "node",
        "depNameTemplate": "node",
        "fileMatch": [
          "\\.?projen.*.(js|cjs|mjs|ts|mts|cts)$",
        ],
        "matchStrings": [
          "minNodeVersion:\\s*'(?<currentValue>[^']+)'",
        ],
        "versioningTemplate": "node",
      },
      {
        "customType": "regex",
        "datasourceTemplate": "npm",
        "depTypeTemplate": "{{#if (equals depType 'addDeps')}}dependencies{{else if (equals depType 'addDevDeps')}}devDependencies{{else}}peerDependencies{{/if}}",
        "fileMatch": [
          "\\.?projen.*.(js|cjs|mjs|ts|mts|cts)$",
        ],
        "matchStrings": [
          "\\.(?<depType>addDeps|addDevDeps|addPeerDeps)\\([^)]*\\)",
          "'(?<depName>[a-zA-Z0-9-]+)@(?<currentValue>[^']+)'",
        ],
        "matchStringsStrategy": "recursive",
      },
      {
        "customType": "regex",
        "datasourceTemplate": "npm",
        "depTypeTemplate": "{{#if (equals depType 'deps')}}dependencies{{else if (equals depType 'devDeps')}}devDependencies{{else}}peerDependencies{{/if}}",
        "fileMatch": [
          "\\.?projen.*.(js|cjs|mjs|ts|mts|cts)$",
        ],
        "matchStrings": [
          "(?<depType>deps|devDeps|peerDeps):\\s*\\[[^\\]]*\\]",
          "'(?<depName>[a-zA-Z0-9-]+)@(?<currentValue>[^']+)'",
        ],
        "matchStringsStrategy": "recursive",
      },
      {
        "customType": "regex",
        "datasourceTemplate": "npm",
        "depNameTemplate": "pnpm",
        "depTypeTemplate": "dependencies",
        "fileMatch": [
          "\\.?projen.*.(js|cjs|mjs|ts|mts|cts)$",
        ],
        "matchStrings": [
          "pnpm@(?<currentValue>[^']+)",
        ],
      },
    ],
    "extends": [
      "config:recommended",
    ],
    "labels": [
      "dependencies",
    ],
    "reviewersFromCodeOwners": true,
  },
}
`;

exports[`with Terraform enabled 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
!.terraform.lock.hcl
*.db
*.log
!.github/
!.projen/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
}
`;

exports[`with TypeScript options 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/tsconfig.json
!/.projenrc.mts
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "@langri-sha/tsconfig",
        "type": "build",
        "version": "*",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.81.15",
      },
      {
        "name": "ts-node",
        "type": "build",
        "version": "10.9.2",
      },
      {
        "name": "typescript",
        "type": "build",
        "version": "5.4.5",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "@langri-sha/tsconfig": "*",
      "projen": "0.81.15",
      "ts-node": "10.9.2",
      "typescript": "5.4.5",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "scripts": {
      "default": "npx projen default",
    },
    "version": "0.0.0",
  },
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      "foo.js",
      "bar.js",
    ],
  },
}
`;

exports[`with code owners configured 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/CODEOWNERS
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "CODEOWNERS",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "CODEOWNERS": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
* @admin
",
}
`;

exports[`with license with author URL 1`] = `
"
MIT License

Copyright (c) 2024 John Smith <john@example.com> (https://example.com)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"
`;

exports[`with license with author email 1`] = `
"
MIT License

Copyright (c) 2024 John Smith <john@example.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"
`;

exports[`with license with author name 1`] = `
"
MIT License

Copyright (c) 2024 John Smith

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"
`;

exports[`with license with copyright year 1`] = `
"
MIT License

Copyright (c) 2000 John Smith

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"
`;

exports[`with package defaults 1`] = `
{
  "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
  "devDependencies": {
    "@langri-sha/projen-project": "*",
    "projen": "0.81.15",
  },
  "license": "Apache-2.0",
  "main": "src/index.ts",
  "name": "test-project",
  "pnpm": {},
  "scripts": {
    "default": "npx projen default",
  },
  "version": "0.0.0",
}
`;

exports[`with workspaces 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
packages/*/lib/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/eslint.config.mjs
!/prettier.config.mjs
!/.prettierignore
!/pnpm-workspace.yaml
!/.projenrc.mts
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.projenrc.mts
packages/*/lib/
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".prettierignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "eslint.config.mjs",
      "pnpm-workspace.yaml",
      "prettier.config.mjs",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "eslint.config.mjs": "import defaults from '@langri-sha/eslint-config'

export default [...defaults, {"ignores":[".*",".projenrc.mts","packages/*/lib/"]}]",
  "pnpm-workspace.yaml": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

packages:
  - packages/*
",
  "prettier.config.mjs": "import defaults from '@langri-sha/prettier'

/** @type {import("prettier").Config} */
    const config = {
      ...defaults,
      }

    export default config
    ",
}
`;
