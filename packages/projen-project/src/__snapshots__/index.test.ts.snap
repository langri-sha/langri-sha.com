// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`With README options 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "README.md": "# test-project
",
}
`;

exports[`add subproject > with options 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/someproject/@some/test/.gitattributes linguist-generated
/someproject/@some/test/.gitignore linguist-generated
/someproject/@some/test/.projen/** linguist-generated
/someproject/@some/test/.projen/deps.json linguist-generated
/someproject/@some/test/.projen/files.json linguist-generated
/someproject/@some/test/.projen/tasks.json linguist-generated
/someproject/@some/test/tsconfig.json linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "someproject/@some/test/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/tsconfig.json
!/.projenrc.mts
",
  "someproject/@some/test/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "tsconfig.json",
    ],
  },
  "someproject/@some/test/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "someproject/@some/test/tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig/project",
  },
}
`;

exports[`creates \`.projenrc\` Projen project configuration > with ESM package 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/.projenrc.ts
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.86.5",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.ts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.ts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "projen": "0.86.5",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "publishConfig": {
      "access": "public",
    },
    "scripts": {
      "default": "npx projen default",
    },
    "type": "module",
    "version": "0.0.0",
  },
}
`;

exports[`creates \`.projenrc\` Projen project configuration > with defaults 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
}
`;

exports[`defaults 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
}
`;

exports[`with \`lint-staged\` > defaults 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/lint-staged.config.mjs linguist-generated
/tsconfig.json linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/tsconfig.json
!/lint-staged.config.mjs
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "lint-staged.config.mjs",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "lint-staged.config.mjs": "import defaults from '@langri-sha/lint-staged'

/** @type {import('lint-staged').Config} */
    const config = {
      ...defaults,
      }

    export default config
    ",
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      ".projenrc.mts",
      "lint-staged.config.mjs",
    ],
  },
}
`;

exports[`with \`lint-staged\` > with ESM package 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/lint-staged.config.js linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/tsconfig.json linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/tsconfig.json
!/lint-staged.config.js
!/.projenrc.ts
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "@langri-sha/tsconfig",
        "type": "build",
        "version": "*",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.86.5",
      },
      {
        "name": "ts-node",
        "type": "build",
        "version": "10.9.2",
      },
      {
        "name": "typescript",
        "type": "build",
        "version": "5.5.4",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "lint-staged.config.js",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.ts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.ts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "lint-staged.config.js": "import defaults from '@langri-sha/lint-staged'

/** @type {import('lint-staged').Config} */
    const config = {
      ...defaults,
      }

    export default config
    ",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "@langri-sha/tsconfig": "*",
      "projen": "0.86.5",
      "ts-node": "10.9.2",
      "typescript": "5.5.4",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "publishConfig": {
      "access": "public",
    },
    "scripts": {
      "default": "npx projen default",
    },
    "type": "module",
    "version": "0.0.0",
  },
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      ".projenrc.ts",
      "lint-staged.config.js",
    ],
  },
}
`;

exports[`with Babel configuration > defaults 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/babel.config.mjs linguist-generated
/tsconfig.json linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/tsconfig.json
!/babel.config.mjs
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "babel.config.mjs",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "babel.config.mjs": "/** @type {import('@babel/core').TransformOptions} */
const config = {
  "presets": [
    "@langri-sha/babel-preset"
  ]
}

export default config
",
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      ".projenrc.mts",
      "babel.config.mjs",
    ],
  },
}
`;

exports[`with Babel configuration > with ESM package 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/babel.config.js linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/tsconfig.json linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/tsconfig.json
!/babel.config.js
!/.projenrc.ts
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "@langri-sha/tsconfig",
        "type": "build",
        "version": "*",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.86.5",
      },
      {
        "name": "ts-node",
        "type": "build",
        "version": "10.9.2",
      },
      {
        "name": "typescript",
        "type": "build",
        "version": "5.5.4",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "babel.config.js",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.ts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.ts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "babel.config.js": "/** @type {import('@babel/core').TransformOptions} */
const config = {
  "presets": [
    "@langri-sha/babel-preset"
  ]
}

export default config
",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "@langri-sha/tsconfig": "*",
      "projen": "0.86.5",
      "ts-node": "10.9.2",
      "typescript": "5.5.4",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "publishConfig": {
      "access": "public",
    },
    "scripts": {
      "default": "npx projen default",
    },
    "type": "module",
    "version": "0.0.0",
  },
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      ".projenrc.ts",
      "babel.config.js",
    ],
  },
}
`;

exports[`with Beachball configuration > defaults 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.prettierignore linguist-generated
/.projen/** linguist-generated
/beachball.config.js linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/prettier.config.mjs linguist-generated
/tsconfig.json linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/tsconfig.json
!/prettier.config.mjs
!/.prettierignore
!/beachball.config.js
!/.projenrc.mts
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
dist/
!.projenrc.mts
pnpm-lock.yaml
CHANGELOG.md
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "@langri-sha/tsconfig",
        "type": "build",
        "version": "*",
      },
      {
        "name": "beachball",
        "type": "build",
        "version": "2.45.0",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.86.5",
      },
      {
        "name": "ts-node",
        "type": "build",
        "version": "10.9.2",
      },
      {
        "name": "typescript",
        "type": "build",
        "version": "5.5.4",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".prettierignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "beachball.config.js",
      "prettier.config.mjs",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "change": {
        "description": "Generate Beachball change files",
        "name": "change",
        "steps": [
          {
            "exec": "beachball change",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "beachball.config.js": "/** @type {import('beachball').BeachballConfig} */
module.exports = {
  "branch": "origin/main",
  "gitTags": false,
  "ignorePatterns": [
    "*.test.*",
    ".*/**",
    "__snapshots__/",
    "dist/",
    "node_modules/"
  ]
}",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "@langri-sha/tsconfig": "*",
      "beachball": "2.45.0",
      "projen": "0.86.5",
      "ts-node": "10.9.2",
      "typescript": "5.5.4",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "publishConfig": {
      "access": "public",
    },
    "scripts": {
      "change": "npx projen change",
      "default": "npx projen default",
    },
    "version": "0.0.0",
  },
  "prettier.config.mjs": "import defaults from '@langri-sha/prettier'

/** @type {import("prettier").Config} */
    const config = {
      ...defaults,
      }

    export default config
    ",
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      ".projenrc.mts",
      "beachball.config.js",
      "prettier.config.mjs",
    ],
  },
}
`;

exports[`with Beachball configuration > with ESM package 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.prettierignore linguist-generated
/.projen/** linguist-generated
/beachball.config.cjs linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/prettier.config.js linguist-generated
/tsconfig.json linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/tsconfig.json
!/prettier.config.js
!/.prettierignore
!/beachball.config.cjs
!/.projenrc.ts
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.*
dist/
!.projenrc.ts
pnpm-lock.yaml
CHANGELOG.md
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "@langri-sha/tsconfig",
        "type": "build",
        "version": "*",
      },
      {
        "name": "beachball",
        "type": "build",
        "version": "2.45.0",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.86.5",
      },
      {
        "name": "ts-node",
        "type": "build",
        "version": "10.9.2",
      },
      {
        "name": "typescript",
        "type": "build",
        "version": "5.5.4",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".prettierignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "beachball.config.cjs",
      "prettier.config.js",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "tasks": {
      "change": {
        "description": "Generate Beachball change files",
        "name": "change",
        "steps": [
          {
            "exec": "beachball change",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.ts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.ts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "beachball.config.cjs": "/** @type {import('beachball').BeachballConfig} */
module.exports = {
  "branch": "origin/main",
  "gitTags": false,
  "ignorePatterns": [
    "*.test.*",
    ".*/**",
    "__snapshots__/",
    "dist/",
    "node_modules/"
  ]
}",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "@langri-sha/tsconfig": "*",
      "beachball": "2.45.0",
      "projen": "0.86.5",
      "ts-node": "10.9.2",
      "typescript": "5.5.4",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "publishConfig": {
      "access": "public",
    },
    "scripts": {
      "change": "npx projen change",
      "default": "npx projen default",
    },
    "type": "module",
    "version": "0.0.0",
  },
  "prettier.config.js": "import defaults from '@langri-sha/prettier'

/** @type {import("prettier").Config} */
    const config = {
      ...defaults,
      }

    export default config
    ",
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      ".projenrc.ts",
      "beachball.config.cjs",
      "prettier.config.js",
    ],
  },
}
`;

exports[`with ESLint options > default 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/eslint.config.mjs linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/tsconfig.json linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/tsconfig.json
!/eslint.config.mjs
!/.projenrc.mts
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "@langri-sha/tsconfig",
        "type": "build",
        "version": "*",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.86.5",
      },
      {
        "name": "ts-node",
        "type": "build",
        "version": "10.9.2",
      },
      {
        "name": "typescript",
        "type": "build",
        "version": "5.5.4",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "eslint.config.mjs",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "eslint.config.mjs": "import defaults from '@langri-sha/eslint-config'

export default [...defaults, {"ignores":["**/.*","**/dist/","!.projenrc.mts"]}]",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "@langri-sha/tsconfig": "*",
      "projen": "0.86.5",
      "ts-node": "10.9.2",
      "typescript": "5.5.4",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "publishConfig": {
      "access": "public",
    },
    "scripts": {
      "default": "npx projen default",
    },
    "version": "0.0.0",
  },
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      ".projenrc.mts",
      "eslint.config.mjs",
    ],
  },
}
`;

exports[`with ESLint options > with ESM package 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/eslint.config.js linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/eslint.config.js
!/.projenrc.ts
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.86.5",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "eslint.config.js",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.ts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.ts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "eslint.config.js": "import defaults from '@langri-sha/eslint-config'

export default [...defaults, {"ignores":["**/.*","**/dist/","!.projenrc.ts"]}]",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "projen": "0.86.5",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "publishConfig": {
      "access": "public",
    },
    "scripts": {
      "default": "npx projen default",
    },
    "type": "module",
    "version": "0.0.0",
  },
}
`;

exports[`with EditorConfig options 1`] = `
{
  ".editorconfig": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

root=true

[*]
charset=utf-8
end_of_line=lf
indent_style=space
indent_size=2
insert_final_newline=true
trim_trailing_whitespace=true

[Dockerfile]
indent_style=tab
",
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.editorconfig linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.prettierignore linguist-generated
/.projen/** linguist-generated
/prettier.config.mjs linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/prettier.config.mjs
!/.prettierignore
!/.editorconfig
!/.projenrc.mts
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
dist/
!.projenrc.mts
!.editorconfig
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".editorconfig",
      ".gitattributes",
      ".gitignore",
      ".prettierignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "prettier.config.mjs",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "prettier.config.mjs": "import defaults from '@langri-sha/prettier'

/** @type {import("prettier").Config} */
    const config = {
      ...defaults,
      }

    export default config
    ",
}
`;

exports[`with Husky options 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.husky/pre-commit linguist-generated
/.projen/** linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.husky/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/.projenrc.mts
",
  ".husky/pre-commit": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
lint-staged
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "husky",
        "type": "build",
        "version": "9.1.5",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.86.5",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".husky/pre-commit",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "husky": "9.1.5",
      "projen": "0.86.5",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "publishConfig": {
      "access": "public",
    },
    "scripts": {
      "default": "npx projen default",
      "prepare": "husky",
    },
    "version": "0.0.0",
  },
}
`;

exports[`with Jest configuration > defaults 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.projen/** linguist-generated
/jest.config.ts linguist-generated
/tsconfig.json linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/tsconfig.json
!/jest.config.ts
!/.npmignore
!/.projenrc.mts
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
*.test.*
__snapshots__/
tsconfig*.json
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "jest.config.ts",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "jest.config.ts": "import type { Config } from 'jest'

    const config: Config = {
      
      }

    export default config
    ",
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      ".projenrc.mts",
      "jest.config.ts",
    ],
  },
}
`;

exports[`with NPM ignore > defaults 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
"
`;

exports[`with PNPM workspace 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.prettierignore linguist-generated
/.projen/** linguist-generated
/eslint.config.mjs linguist-generated
/pnpm-workspace.yaml linguist-generated
/prettier.config.mjs linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/eslint.config.mjs
!/prettier.config.mjs
!/.prettierignore
!/pnpm-workspace.yaml
!/.projenrc.mts
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
dist/
!.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".prettierignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "eslint.config.mjs",
      "pnpm-workspace.yaml",
      "prettier.config.mjs",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "eslint.config.mjs": "import defaults from '@langri-sha/eslint-config'

export default [...defaults, {"ignores":["**/.*","**/dist/","!.projenrc.mts"]}]",
  "pnpm-workspace.yaml": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

packages:
  - packages/*
",
  "prettier.config.mjs": "import defaults from '@langri-sha/prettier'

/** @type {import("prettier").Config} */
    const config = {
      ...defaults,
      }

    export default config
    ",
}
`;

exports[`with Prettier options > defaults 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.prettierignore linguist-generated
/.projen/** linguist-generated
/prettier.config.mjs linguist-generated
/tsconfig.json linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/tsconfig.json
!/prettier.config.mjs
!/.prettierignore
!/.projenrc.mts
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
dist/
!.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".prettierignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "prettier.config.mjs",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "prettier.config.mjs": "import defaults from '@langri-sha/prettier'

/** @type {import("prettier").Config} */
    const config = {
      ...defaults,
      }

    export default config
    ",
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      ".projenrc.mts",
      "prettier.config.mjs",
    ],
  },
}
`;

exports[`with Prettier options > with ESM package 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.prettierignore linguist-generated
/.projen/** linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/prettier.config.js linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/prettier.config.js
!/.prettierignore
!/.projenrc.ts
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.*
dist/
!.projenrc.ts
pnpm-lock.yaml
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.86.5",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".prettierignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "prettier.config.js",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.ts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.ts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "projen": "0.86.5",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "publishConfig": {
      "access": "public",
    },
    "scripts": {
      "default": "npx projen default",
    },
    "type": "module",
    "version": "0.0.0",
  },
  "prettier.config.js": "import defaults from '@langri-sha/prettier'

/** @type {import("prettier").Config} */
    const config = {
      ...defaults,
      }

    export default config
    ",
}
`;

exports[`with Renovate options 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/renovate.json5 linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/renovate.json5
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "renovate.json5",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "renovate": {
        "description": "Run Renovate locally for debugging",
        "name": "renovate",
        "steps": [
          {
            "exec": "pnpx renovate --platform=local --repository-cache=reset --dry-run=full",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "renovate.json5": {
    "$schema": "https://docs.renovatebot.com/renovate-schema.json",
    "configMigration": true,
    "customManagers": [
      {
        "currentValueTemplate": ">= {{currentValue}}",
        "customType": "regex",
        "datasourceTemplate": "node",
        "depNameTemplate": "node",
        "fileMatch": [
          "\\.?projen.*.(js|cjs|mjs|ts|mts|cts)$",
        ],
        "matchStrings": [
          "minNodeVersion:\\s*'(?<currentValue>[^']+)'",
        ],
        "versioningTemplate": "node",
      },
      {
        "customType": "regex",
        "datasourceTemplate": "npm",
        "depTypeTemplate": "{{#if (equals depType 'addDeps')}}dependencies{{else if (equals depType 'addDevDeps')}}devDependencies{{else}}peerDependencies{{/if}}",
        "fileMatch": [
          "\\.?projen.*.(js|cjs|mjs|ts|mts|cts)$",
        ],
        "matchStrings": [
          "\\.(?<depType>addDeps|addDevDeps|addPeerDeps)\\([^)]*\\)",
          "'(?<depName>@?[\\w-\\/]+)@(?<currentValue>[^']+)'",
        ],
        "matchStringsStrategy": "recursive",
      },
      {
        "customType": "regex",
        "datasourceTemplate": "npm",
        "depTypeTemplate": "{{#if (equals depType 'deps')}}dependencies{{else if (equals depType 'devDeps')}}devDependencies{{else}}peerDependencies{{/if}}",
        "fileMatch": [
          "\\.?projen.*.(js|cjs|mjs|ts|mts|cts)$",
        ],
        "matchStrings": [
          "(?<depType>deps|devDeps|peerDeps):\\s*\\[[^\\]]*\\]",
          "'(?<depName>@?[\\w-\\/]+)@(?<currentValue>[^']+)'",
        ],
        "matchStringsStrategy": "recursive",
      },
      {
        "customType": "regex",
        "datasourceTemplate": "npm",
        "depNameTemplate": "pnpm",
        "depTypeTemplate": "dependencies",
        "fileMatch": [
          "\\.?projen.*.(js|cjs|mjs|ts|mts|cts)$",
        ],
        "matchStrings": [
          "pnpm@(?<currentValue>[^']+)",
        ],
      },
      {
        "customType": "regex",
        "datasourceTemplate": "npm",
        "depNameTemplate": "pnpm",
        "depTypeTemplate": "dependencies",
        "fileMatch": [
          "\\.(js|cjs|mjs|ts|mts|cts|ya?ml)$",
        ],
        "matchStrings": [
          "(bun|p?np)x (?<depName>[\\w\\-\\/]+)@(?<currentValue>[^s]+)",
        ],
      },
    ],
    "extends": [
      "config:recommended",
    ],
    "labels": [
      "dependencies",
    ],
    "lockFileMaintenance": {
      "enabled": true,
    },
    "reviewersFromCodeOwners": true,
  },
}
`;

exports[`with SWC options > defaults 1`] = `
"{
  "$schema": "https://json.schemastore.org/swcrc",
  "env": {
    "targets": {
      "node": "current"
    }
  }
}
"
`;

exports[`with SWC options > with TypeScript 1`] = `
"{
  "$schema": "https://json.schemastore.org/swcrc",
  "jsc": {
    "parser": {
      "syntax": "typescript"
    }
  },
  "env": {
    "targets": {
      "node": "current"
    }
  }
}
"
`;

exports[`with Terraform enabled 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
!.terraform.lock.hcl
*.db
*.log
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
}
`;

exports[`with TypeScript options > configures project references between subprojects 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/sub-project-a/.gitattributes linguist-generated
/sub-project-a/.gitignore linguist-generated
/sub-project-a/.projen/** linguist-generated
/sub-project-a/.projen/deps.json linguist-generated
/sub-project-a/.projen/files.json linguist-generated
/sub-project-a/.projen/tasks.json linguist-generated
/sub-project-a/package.json linguist-generated
/sub-project-a/pnpm-lock.yaml linguist-generated
/sub-project-a/tsconfig.json linguist-generated
/sub-project-b/.gitattributes linguist-generated
/sub-project-b/.gitignore linguist-generated
/sub-project-b/.projen/** linguist-generated
/sub-project-b/.projen/deps.json linguist-generated
/sub-project-b/.projen/files.json linguist-generated
/sub-project-b/.projen/tasks.json linguist-generated
/sub-project-b/package.json linguist-generated
/sub-project-b/pnpm-lock.yaml linguist-generated
/sub-project-b/tsconfig.json linguist-generated
/tsconfig.json linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/tsconfig.json
!/.projenrc.mts
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "@langri-sha/tsconfig",
        "type": "build",
        "version": "*",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.86.5",
      },
      {
        "name": "ts-node",
        "type": "build",
        "version": "10.9.2",
      },
      {
        "name": "typescript",
        "type": "build",
        "version": "5.5.4",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "@langri-sha/tsconfig": "*",
      "projen": "0.86.5",
      "ts-node": "10.9.2",
      "typescript": "5.5.4",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "publishConfig": {
      "access": "public",
    },
    "scripts": {
      "default": "npx projen default",
    },
    "version": "0.0.0",
  },
  "sub-project-a/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/tsconfig.json
!/.projenrc.mts
",
  "sub-project-a/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/tsconfig",
        "type": "build",
        "version": "*",
      },
      {
        "name": "sub-project-b",
        "type": "runtime",
        "version": "workspace:*",
      },
    ],
  },
  "sub-project-a/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "tsconfig.json",
    ],
  },
  "sub-project-a/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "sub-project-a/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": {
      "sub-project-b": "workspace:*",
    },
    "devDependencies": {
      "@langri-sha/tsconfig": "*",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "sub-project-a",
    "publishConfig": {
      "access": "public",
    },
    "scripts": {},
    "version": "0.0.0",
  },
  "sub-project-a/tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig/project",
    "references": [
      {
        "path": "../sub-project-b",
      },
    ],
  },
  "sub-project-b/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/tsconfig.json
!/.projenrc.mts
",
  "sub-project-b/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/tsconfig",
        "type": "build",
        "version": "*",
      },
      {
        "name": "sub-project-a",
        "type": "runtime",
        "version": "workspace:*",
      },
    ],
  },
  "sub-project-b/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "tsconfig.json",
    ],
  },
  "sub-project-b/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "sub-project-b/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": {
      "sub-project-a": "workspace:*",
    },
    "devDependencies": {
      "@langri-sha/tsconfig": "*",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "sub-project-b",
    "publishConfig": {
      "access": "public",
    },
    "scripts": {},
    "version": "0.0.0",
  },
  "sub-project-b/tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig/project",
    "references": [
      {
        "path": "../sub-project-a",
      },
    ],
  },
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      ".projenrc.mts",
    ],
    "references": [
      {
        "path": "sub-project-a",
      },
      {
        "path": "sub-project-b",
      },
    ],
  },
}
`;

exports[`with TypeScript options > defaults 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/tsconfig.json linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/tsconfig.json
!/.projenrc.mts
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "@langri-sha/tsconfig",
        "type": "build",
        "version": "*",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.86.5",
      },
      {
        "name": "ts-node",
        "type": "build",
        "version": "10.9.2",
      },
      {
        "name": "typescript",
        "type": "build",
        "version": "5.5.4",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "@langri-sha/tsconfig": "*",
      "projen": "0.86.5",
      "ts-node": "10.9.2",
      "typescript": "5.5.4",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "publishConfig": {
      "access": "public",
    },
    "scripts": {
      "default": "npx projen default",
    },
    "version": "0.0.0",
  },
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      ".projenrc.mts",
      "bar.js",
      "foo.js",
    ],
  },
}
`;

exports[`with TypeScript options > with SWC 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.swcrc linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/tsconfig.json linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
*.tsbuildinfo
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/tsconfig.json
!/.swcrc
!/.projenrc.mts
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "dependencies": [
      {
        "name": "@langri-sha/projen-project",
        "type": "build",
        "version": "*",
      },
      {
        "name": "@langri-sha/tsconfig",
        "type": "build",
        "version": "*",
      },
      {
        "name": "@swc-node/register",
        "type": "build",
        "version": "1.10.9",
      },
      {
        "name": "@swc/core",
        "type": "build",
        "version": "1.7.22",
      },
      {
        "name": "projen",
        "type": "build",
        "version": "0.86.5",
      },
      {
        "name": "typescript",
        "type": "build",
        "version": "5.5.4",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".swcrc",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  ".swcrc": "{
  "$schema": "https://json.schemastore.org/swcrc",
  "jsc": {
    "parser": {
      "syntax": "typescript"
    }
  },
  "env": {
    "targets": {
      "node": "current"
    }
  }
}
",
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "devDependencies": {
      "@langri-sha/projen-project": "*",
      "@langri-sha/tsconfig": "*",
      "@swc-node/register": "1.10.9",
      "@swc/core": "1.7.22",
      "projen": "0.86.5",
      "typescript": "5.5.4",
    },
    "license": "Apache-2.0",
    "main": "src/index.ts",
    "name": "test-project",
    "pnpm": {},
    "publishConfig": {
      "access": "public",
    },
    "scripts": {
      "default": "npx projen default",
    },
    "version": "0.0.0",
  },
  "tsconfig.json": {
    "$schema": "https://json.schemastore.org/tsconfig",
    "extends": "@langri-sha/tsconfig",
    "files": [
      ".projenrc.mts",
    ],
  },
}
`;

exports[`with code owners configured 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/CODEOWNERS linguist-generated
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
.*
!.babelrc
!.dockerignore
!.editorconfig
!.gitattributes
!.gitignore
!.gitkeep
!.npmignore
!.openssl
!.prettierignore
*.db
*.log
!.github/
!.projen/
dist/
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/CODEOWNERS
!/.projenrc.mts
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "CODEOWNERS",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
    "tasks": {
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "node --loader ts-node/esm/transpile-only .projenrc.mts",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  ".projenrc.mts": "import { Project } from '@langri-sha/projen-project'

      const project = new Project()

      project.synth()
      ",
  "CODEOWNERS": "# ~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".
* @admin
",
}
`;

exports[`with license > with author URL 1`] = `
"
MIT License

Copyright (c) 2024 John Smith <john@example.com> (https://example.com)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"
`;

exports[`with license > with author email 1`] = `
"
MIT License

Copyright (c) 2024 John Smith <john@example.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"
`;

exports[`with license > with author name 1`] = `
"
MIT License

Copyright (c) 2024 John Smith

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"
`;

exports[`with license > with copyright year 1`] = `
"
MIT License

Copyright (c) 2000 John Smith

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"
`;

exports[`with package > defaults 1`] = `
{
  "//": "~~ Generated by projen. To modify, edit .projenrc.mts and run "npx projen".",
  "devDependencies": {
    "@langri-sha/projen-project": "*",
    "projen": "0.86.5",
  },
  "license": "Apache-2.0",
  "main": "src/index.ts",
  "name": "test-project",
  "pnpm": {},
  "publishConfig": {
    "access": "public",
  },
  "scripts": {
    "default": "npx projen default",
  },
  "version": "0.0.0",
}
`;
