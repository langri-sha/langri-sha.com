import * as path from 'node:path'
import * as fs from 'node:fs/promises'
import { afterEach, expect, nock, tempy, test } from '@langri-sha/vitest'
import { compile } from './index.js'
import { vi } from 'vitest'
import envPaths from 'env-paths'

vi.mock('env-paths', () => {
  const cache = tempy.directory()

  return {
    default: () => ({ cache }),
  }
})

const paths = envPaths('schemastore-to-typescript')

afterEach(() => {
  nock.cleanAll()
})

test('compiles to TypeScript', async () => {
  nock('https://json.schemastore.org')
    .get('/some')
    .reply(
      200,
      {
        $schema: 'http://json-schema.org/draft-07/schema#',
        title: 'Some Schema',
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'The unique identifier for some item.',
          },
        },
        required: ['id'],
      },
      {
        'Cache-Control': 'public, no-store',
      },
    )

  const ts = await compile('some')

  expect(ts).toMatchInlineSnapshot(`
    "/* eslint-disable */
    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface SomeSchema {
      /**
       * The unique identifier for some item.
       */
      id: string;
      [k: string]: unknown;
    }
    "
  `)
})

test('uses cache', async () => {
  nock('https://json.schemastore.org')
    .get('/foobar')
    .reply(
      200,
      {
        $schema: 'http://json-schema.org/draft-07/schema#',
        title: 'Foobar Schema',
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'The unique identifier for a foobar item.',
          },
        },
        required: ['id'],
      },
      {
        'Cache-Control': 'public, max-age=3600',
      },
    )
    .get('/foobar')
    .reply(
      200,
      {
        $schema: 'http://json-schema.org/draft-07/schema#',
        title: 'Barbaz Schema',
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'The unique identifier for a barbaz item.',
          },
        },
        required: ['id'],
      },

      {
        'Cache-Control': 'public, max-age=3600',
        ETag: 'etag123',
      },
    )

  expect(await compile('foobar')).toBe(await compile('foobar'))

  await new Promise((resolve) => {
    setTimeout(resolve, 0)
  })

  const cached = JSON.parse(
    (await fs.readFile(path.join(paths.cache, 'requests.json'))).toString(
      'utf8',
    ),
  )

  expect(cached.cache).toHaveLength(1)
  expect(cached.cache[0][0]).toBe(
    'keyv:GET:https://json.schemastore.org/foobar',
  )
})

test('handles missing schemas', async () => {
  nock('https://json.schemastore.org').get('/unknown').reply(404)

  expect(compile('unknown')).rejects.toThrow(/Couldn't find schema unknown/)
})

test('handles missing schemas', async () => {
  nock('https://json.schemastore.org')
    .get('/err')
    .replyWithError('Something went wrong')

  expect(compile('err')).rejects.toThrow(/Something went wrong/)
})
